/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cerl.gui.forms;

import cerl.gui.standard.utilities.Result;
import cerl.gui.utilities.CensusSurveyClasses;
import static cerl.gui.utilities.DigPopFileTypeEnum.Household_Micro_Data;
import cerl.gui.utilities.DigPopGUIInformation;
import cerl.gui.utilities.DigPopGUIUtilityClass;
import cerl.gui.utilities.HelpFileScreenNames;
import cerl.gui.utilities.MarkovChain;
import cerl.gui.utilities.Step3MarkovChainTableItemModel;
import cerl.gui.utilities.SurveyColumnValue;
import cerl.gui.utilities.SurveyColumnValuesGrouping;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingWorker;

/**
 * Step 3 of the DigPop GUI
 * Allows the user to select the census and survey information to use in a Markov Chain
 * Users can create multiple Markov Chains
 * @author ajohnson
 */
public class StepThree extends javax.swing.JFrame {

    public CensusSurveyClasses censusSurveyClasses = new CensusSurveyClasses();
    public cerl.gui.utilities.Class selectSurveyClass = new cerl.gui.utilities.Class();

    private final DefaultListModel censusAllListModel = new DefaultListModel();
    private final JList censusAllList = new JList(censusAllListModel);

    private final DefaultListModel censusSelectedListModel = new DefaultListModel();
    private final JList censusSelectedList = new JList(censusSelectedListModel);

    private final DefaultListModel surveyAllListModel = new DefaultListModel();
    private final JList surveyAllList = new JList(surveyAllListModel);
    
    private final DefaultListModel surveyGroupsListModel = new DefaultListModel();
    private final JList surveyGroupsList = new JList(surveyGroupsListModel);
    
    private final Step3MarkovChainTableItemModel step3MarkovChainTableItemModel;

    private final DigPopGUIInformation digPopGUIInformation;
    
    private final String DEFAULT_NEW_MARKOV_CHAIN_NAME = "New Markov Chain Name";
    
    private boolean newSurveyGroupingsHaveAllBeenCreated = false;
    private int currentMarkovChainIdToShow;
    
    private final String SCREEN_NAME = HelpFileScreenNames.STEP_THREE_HELP_FILE_NAME.toString();
    
    /**
     * Initializes a new Step 3 from the current DigPop run
     * Allows users to select the census and survey data to use in their Markov
     * @param digPopGUIInformation 
     */
    public StepThree(DigPopGUIInformation digPopGUIInformation) {
        this.digPopGUIInformation = digPopGUIInformation;
        this.step3MarkovChainTableItemModel = new Step3MarkovChainTableItemModel(this.digPopGUIInformation.getCensusSurveyClasses().getMarkovChains());
        
        loadCensusSurveyClasses();

        initComponents();
        
        loadForm();
        
        /**
         * Mouse Listener for the MarkovChains display table.
         * The user can double click a MarkovChain from the table 
         * and will be given the option to view or delete.  
         */
        jTableListOfAllMarkovChains.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent me) {
                if (me.getClickCount() == 2) {
                    MarkovChain markovChain = 
                            step3MarkovChainTableItemModel.getMarkovAt(jTableListOfAllMarkovChains.getSelectedRow(), jTableListOfAllMarkovChains.getSelectedColumn());
                    
                    openOrDeleteExistingMarkov(markovChain);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialogLoadingFile = new javax.swing.JDialog();
        jLabel5 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jPanel1 = new javax.swing.JPanel();
        surveyJPanel = new javax.swing.JPanel();
        jScrollPaneSurveyAll = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JLabel();
        btnSurveyDataGroups = new javax.swing.JButton();
        jScrollPaneSurveyDataGroups = new javax.swing.JScrollPane();
        btnClearSurveyData = new javax.swing.JButton();
        censusJPanel = new javax.swing.JPanel();
        jScrollPaneCensusAll = new javax.swing.JScrollPane();
        btnAddCensusClass = new javax.swing.JButton();
        jScrollPaneCensusSelected = new javax.swing.JScrollPane();
        btnRemoveCensusClass = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnEditSelectedCensusDataDescriptions = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtNewMarkovChainName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnCreateNewMarkovChain = new javax.swing.JButton();
        btnPreviousStep = new javax.swing.JButton();
        btnNextStep = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableListOfAllMarkovChains = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuHelp = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();

        jDialogLoadingFile.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        jDialogLoadingFile.setAlwaysOnTop(true);
        jDialogLoadingFile.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        jDialogLoadingFile.setModal(true);
        jDialogLoadingFile.setResizable(false);
        jDialogLoadingFile.setType(java.awt.Window.Type.UTILITY);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Please Wait While File is Loading.....");

        jProgressBar1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jProgressBar1.setIndeterminate(true);
        jProgressBar1.setString("");

        javax.swing.GroupLayout jDialogLoadingFileLayout = new javax.swing.GroupLayout(jDialogLoadingFile.getContentPane());
        jDialogLoadingFile.getContentPane().setLayout(jDialogLoadingFileLayout);
        jDialogLoadingFileLayout.setHorizontalGroup(
            jDialogLoadingFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialogLoadingFileLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialogLoadingFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
                .addContainerGap())
        );
        jDialogLoadingFileLayout.setVerticalGroup(
            jDialogLoadingFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialogLoadingFileLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Step 3");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        surveyJPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        surveyJPanel.setMinimumSize(new java.awt.Dimension(0, 0));

        jScrollPaneSurveyAll.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Available Survey/Microdata Columns  (Select Only One):");

        btnSurveyDataGroups.setText("Add/Edit Survey Data Groups");
        btnSurveyDataGroups.setEnabled(false);
        btnSurveyDataGroups.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSurveyDataGroupsActionPerformed(evt);
            }
        });

        jScrollPaneSurveyDataGroups.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnClearSurveyData.setText("Clear Survey Data");
        btnClearSurveyData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearSurveyDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout surveyJPanelLayout = new javax.swing.GroupLayout(surveyJPanel);
        surveyJPanel.setLayout(surveyJPanelLayout);
        surveyJPanelLayout.setHorizontalGroup(
            surveyJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(surveyJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(surveyJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPaneSurveyAll))
                .addGap(16, 16, 16)
                .addGroup(surveyJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(surveyJPanelLayout.createSequentialGroup()
                        .addComponent(btnSurveyDataGroups)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnClearSurveyData, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPaneSurveyDataGroups))
                .addContainerGap())
        );
        surveyJPanelLayout.setVerticalGroup(
            surveyJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(surveyJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(surveyJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(surveyJPanelLayout.createSequentialGroup()
                        .addGroup(surveyJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSurveyDataGroups)
                            .addComponent(btnClearSurveyData))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPaneSurveyDataGroups))
                    .addComponent(jScrollPaneSurveyAll, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        censusJPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jScrollPaneCensusAll.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnAddCensusClass.setText("Add");
        btnAddCensusClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCensusClassActionPerformed(evt);
            }
        });

        jScrollPaneCensusSelected.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnRemoveCensusClass.setText("Remove");
        btnRemoveCensusClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveCensusClassActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Available Enumeration Columns:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Selected Enumeration Columns:");

        btnEditSelectedCensusDataDescriptions.setText("Edit Selected Census Data Descriptions");
        btnEditSelectedCensusDataDescriptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditSelectedCensusDataDescriptionsActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("New Markov Chain Name:");

        javax.swing.GroupLayout censusJPanelLayout = new javax.swing.GroupLayout(censusJPanel);
        censusJPanel.setLayout(censusJPanelLayout);
        censusJPanelLayout.setHorizontalGroup(
            censusJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(censusJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(censusJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(censusJPanelLayout.createSequentialGroup()
                        .addGroup(censusJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(censusJPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPaneCensusAll, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(censusJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnAddCensusClass, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnRemoveCensusClass)))
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(censusJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jScrollPaneCensusSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEditSelectedCensusDataDescriptions))
                        .addGap(0, 1, Short.MAX_VALUE))
                    .addGroup(censusJPanelLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNewMarkovChainName)))
                .addContainerGap())
        );
        censusJPanelLayout.setVerticalGroup(
            censusJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(censusJPanelLayout.createSequentialGroup()
                .addGroup(censusJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(censusJPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(censusJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtNewMarkovChainName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(censusJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(censusJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneCensusAll, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(censusJPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPaneCensusSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnEditSelectedCensusDataDescriptions))))
                    .addGroup(censusJPanelLayout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(btnAddCensusClass)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemoveCensusClass)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Select The Information for The New Markov Chain");

        btnCreateNewMarkovChain.setText("Create New Markov Chain");
        btnCreateNewMarkovChain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateNewMarkovChainActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(censusJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(surveyJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnCreateNewMarkovChain)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(censusJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(surveyJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCreateNewMarkovChain)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        btnPreviousStep.setText("Previous Step");
        btnPreviousStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousStepActionPerformed(evt);
            }
        });

        btnNextStep.setText("Next Step");
        btnNextStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextStepActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTableListOfAllMarkovChains.setModel(step3MarkovChainTableItemModel);
        jScrollPane1.setViewportView(jTableListOfAllMarkovChains);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("To Open or Delete Existing Markov Chain: Please Double Click on Specified Markov Chain in Table.");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                .addContainerGap())
        );

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenuHelp.setText("Help");
        jMenuHelp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuHelpMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuHelp);

        jMenu3.setText("About");
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnPreviousStep)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnNextStep)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPreviousStep)
                    .addComponent(btnNextStep))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handles adding a new census class, moves from available to selected
     * @param evt 
     */
    private void btnAddCensusClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCensusClassActionPerformed

        List<cerl.gui.utilities.Class> selected = censusAllList.getSelectedValuesList();

        for (cerl.gui.utilities.Class c : selected) {
            c.setSelected(true);
            censusAllListModel.removeElement(c);
            censusSelectedListModel.addElement(c);
        }

    }//GEN-LAST:event_btnAddCensusClassActionPerformed

    /**
     * Removes a selected census class from the selected list
     * Moves it back to available
     * @param evt 
     */
    private void btnRemoveCensusClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveCensusClassActionPerformed

        List<cerl.gui.utilities.Class> selected = censusSelectedList.getSelectedValuesList();

        for (cerl.gui.utilities.Class c : selected) {
            c.setSelected(false);
            censusSelectedListModel.removeElement(c);
            censusAllListModel.addElement(c);
        }

    }//GEN-LAST:event_btnRemoveCensusClassActionPerformed

    /**
     * Opens the window for users to enter custom descriptions for selected census data
     * @param evt 
     */
    private void btnEditSelectedCensusDataDescriptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditSelectedCensusDataDescriptionsActionPerformed
        CensusClassUserDefinitions censusClassUserDefinitionsForm = new CensusClassUserDefinitions(this);
        censusClassUserDefinitionsForm.setVisible(true);
        censusClassUserDefinitionsForm.setAlwaysOnTop(true);
        censusClassUserDefinitionsForm.setLocationRelativeTo(this);

        this.setVisible(false);
    }//GEN-LAST:event_btnEditSelectedCensusDataDescriptionsActionPerformed

    /**
     * Handles opening the window
     * @param evt 
     */
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
    }//GEN-LAST:event_formWindowOpened

    /**
     * Opens the screen for users to add/edit survey groups
     * @param evt 
     */
    private void btnSurveyDataGroupsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSurveyDataGroupsActionPerformed
        
        SwingWorker<Void,Void> worker = new SwingWorker<Void,Void>()
        {
            @Override
            protected Void doInBackground()
            {
                selectSurveyClass = (cerl.gui.utilities.Class)surveyAllList.getSelectedValue();

                if(selectSurveyClass.getAllSurveyColumnValues().isEmpty()){
                    String filePath = "";
                    String fileType = "";
                    switch(selectSurveyClass.getDigPopFileTypeEnum()){
                        case Household_Micro_Data:
                            filePath = digPopGUIInformation.getHouseholdMicroDataFilePath();
                            fileType = "HOUSEHOLDS";
                            break;
                        case Population_Micro_Data:
                            filePath = digPopGUIInformation.getPopulationMicroDataFilePath();
                            fileType = "POPULATION";
                            break;
                    }

                    Result result = DigPopGUIUtilityClass.getSurveyDataColumnValues(
                            filePath, 
                            selectSurveyClass.getColumnNumber(),fileType);
                    ArrayList<SurveyColumnValue> columnValues = (ArrayList<SurveyColumnValue>)result.getValue();
                    selectSurveyClass.setAllSurveyColumnValues(columnValues);
                }
                return null;
            }
 
            @Override
            protected void done()
            {
                jDialogLoadingFile.dispose();
            }
        };
        
        worker.execute();
        
        jDialogLoadingFile.pack();
        jDialogLoadingFile.setLocationRelativeTo(this);
        jDialogLoadingFile.setVisible(true); 
        
        SelectSurveyDataColumnGroupings selectSurveyDataColumnGroupings = new SelectSurveyDataColumnGroupings(selectSurveyClass, this);
        selectSurveyDataColumnGroupings.setVisible(true);
        selectSurveyDataColumnGroupings.setAlwaysOnTop(true);
        selectSurveyDataColumnGroupings.setLocationRelativeTo(this);
        this.setVisible(false);
        this.setAlwaysOnTop(false);
    }//GEN-LAST:event_btnSurveyDataGroupsActionPerformed

    /**
     * Handles the about menu, opens the About pop-up
     * @param evt 
     */
    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        About about = new About();
        about.setVisible(true);
        about.setLocationRelativeTo(this);
    }//GEN-LAST:event_jMenu3MouseClicked

    /**
     * Saves the current information and takes the user back to Step 2
     * @param evt 
     */
    private void btnPreviousStepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousStepActionPerformed
        saveToFile();
        
        StepTwo stepTwo = new StepTwo(this.digPopGUIInformation);
        stepTwo.setVisible(true);
        stepTwo.setLocationRelativeTo(this);
        
        dispose();
    }//GEN-LAST:event_btnPreviousStepActionPerformed

    /**
     * Saves the current step and takes the user to Step 7
     * @param evt 
     */
    private void btnNextStepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextStepActionPerformed
        saveToFile();
        //Step 5
        new FittingCriteria(this.digPopGUIInformation).setVisible(true);
        dispose();
        
        dispose();
    }//GEN-LAST:event_btnNextStepActionPerformed

    /**
     * Clears the currently selected survey information
     * @param evt 
     */
    private void btnClearSurveyDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearSurveyDataActionPerformed
        clearSurveyListData();
        updateSurveyGroupsListModel();
    }//GEN-LAST:event_btnClearSurveyDataActionPerformed

    /**
     * Creates a new Markov Chain from the selected census and survey information
     * @param evt 
     */
    private void btnCreateNewMarkovChainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateNewMarkovChainActionPerformed
        if(this.newSurveyGroupingsHaveAllBeenCreated && this.censusSelectedListModel.getSize() > 0){
            saveNewMarkovChain();

            MarkovChainMatrix markovChainMatrix =new MarkovChainMatrix(this.digPopGUIInformation, this.currentMarkovChainIdToShow);
            markovChainMatrix.setVisible(true);
            markovChainMatrix.setLocationRelativeTo(this);

            dispose();
        }else {
            JOptionPane.showMessageDialog(
                    this,
                    "One or more census classes needs seleded and all survey classes must be grouped.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_btnCreateNewMarkovChainActionPerformed

    /**
     * Handles the help menu, opens Help information for the current screen
     * @param evt 
     */
    private void jMenuHelpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuHelpMouseClicked
        DigPopGUIUtilityClass.loadDefaultHelpGUIByScreenName(SCREEN_NAME);
    }//GEN-LAST:event_jMenuHelpMouseClicked

    /**
     * When a user double clicks on a Markov Chain in the list, 
     * allows the user to open or delete the selected Markov Chain
     * @param markovChain 
     */
    public void openOrDeleteExistingMarkov(MarkovChain markovChain){
        Object[] options = {
                        "Open",
                        "Delete"};
        int selectedOption = JOptionPane.showOptionDialog(this,
            "Would you like to open or delete the Markov Chain: " + markovChain.getMarkovName(),
            "Question",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,
            options,
            options[0]);
        
        if(selectedOption == 0){
            MarkovChainMatrix markovChainMatrix =new MarkovChainMatrix(this.digPopGUIInformation, markovChain.getId());
            markovChainMatrix.setVisible(true);
            markovChainMatrix.setLocationRelativeTo(this);

            dispose();
        } else if(selectedOption == 1){
            int answer = JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to delete Markov Chain: " + markovChain.getMarkovName() + "?",
                "Delete?",
                JOptionPane.YES_NO_OPTION);
            
            if(answer == 0){
                this.censusSurveyClasses.getMarkovChains().remove(markovChain);
                this.step3MarkovChainTableItemModel.fireTableDataChanged();
            }
        }
                    
    }
    
    /**
     * Clears the current survey list data
     */
    private void clearSurveyListData(){
        surveyAllList.clearSelection();
        selectSurveyClass.setSurveyColumnValuesGroupings(new ArrayList<SurveyColumnValuesGrouping>());
    }
    
    /**
     * Updates the current survey groups in the saved model
     */
    public void updateSurveyGroupsListModel(){
        this.newSurveyGroupingsHaveAllBeenCreated = true;
        surveyGroupsListModel.removeAllElements();
        selectSurveyClass.getSurveyColumnValuesGroupings().stream().forEach((c) -> {
            surveyGroupsListModel.addElement(c);
        });
    }
    
    /**
     * Updates the selected census items in the saved model
     */
    public void updateCensusSelectedListModel(){
        censusSelectedListModel.removeAllElements();
        censusSurveyClasses.getCensusClasses().stream().forEach((c) -> {
            if(c.isSelected()){
                censusSelectedListModel.addElement(c);
            }
        });
    }
    
    /**
     * Loads the census and survey data
     */
    private void loadForm(){
        censusSurveyClasses.getCensusClasses().stream().forEach((c) -> {
            
            /**
             * No census classes can be selected when starting to create a new 
             * markov chain. 
             */
            if(c.isSelected()){
               c.setSelected(false);
            }
            
            censusAllListModel.addElement(c);
        });
        
        ArrayList<cerl.gui.utilities.Class> allSurveyClasses = new ArrayList<cerl.gui.utilities.Class>();
        allSurveyClasses.addAll(censusSurveyClasses.getHouseholdMicroDataClasses());
        allSurveyClasses.addAll(censusSurveyClasses.getPopulationMicroDataClasses());
        
       Collections.sort(allSurveyClasses,cerl.gui.utilities.Class.ClassNameComparator);
        
//        censusSurveyClasses.getHouseholdMicroDataClasses().stream().forEach((c) -> {
//            surveyAllListModel.add(c);
//        });
//        censusSurveyClasses.getPopulationMicroDataClasses().stream().forEach((c) -> {
//            surveyAllListModel.add(c);
//        });

        allSurveyClasses.stream().forEach((c) -> {
            surveyAllListModel.addElement(c);
        });
        
        selectSurveyClass.getSurveyColumnValuesGroupings().stream().forEach((c) -> {
            surveyGroupsListModel.addElement(c);
        });

        jScrollPaneCensusAll.setViewportView(censusAllList);
        jScrollPaneCensusSelected.setViewportView(censusSelectedList);
        
        surveyAllList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        jScrollPaneSurveyAll.setViewportView(surveyAllList);
        
        jScrollPaneSurveyDataGroups.setViewportView(surveyGroupsList);
        
        surveyAllList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                if(!surveyAllList.isSelectionEmpty() 
                        && surveyAllList.getSelectedValue().getClass() == cerl.gui.utilities.Class.class){
                    btnSurveyDataGroups.setEnabled(true);
                }else {
                    btnSurveyDataGroups.setEnabled(false);
                }
            }
        });
        
        String dateString = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
        String newDefaultNameWithTimeStamp = String.format(
                    "%s_%s", 
                    DEFAULT_NEW_MARKOV_CHAIN_NAME,
                    dateString);
        
        txtNewMarkovChainName.setText(newDefaultNameWithTimeStamp);

        pack();
    }
    
    /**
     * Loads the census and survey information from the saved DigPop run
     */
    private void loadCensusSurveyClasses(){
        if(this.digPopGUIInformation.getCensusSurveyClasses().getMarkovChains().size() > 0){
            this.censusSurveyClasses = this.digPopGUIInformation.getCensusSurveyClasses();
        }
        else {
            Result result = DigPopGUIUtilityClass.getLoadedCensusSurveyClasses(
                    this.digPopGUIInformation.getCensusEnumerationsFilePath(),
                    this.digPopGUIInformation.getPopulationMicroDataFilePath(),
                    this.digPopGUIInformation.getHouseholdMicroDataFilePath());
            this.censusSurveyClasses = (CensusSurveyClasses) result.getValue();
        }
    }
    
    /**
     * Saves a newly created Markov Chain
     * @return Result Object containing if it successfully saved
     */
    private Result saveNewMarkovChain(){
        ArrayList<cerl.gui.utilities.Class> selectedCensusClasses = new ArrayList<cerl.gui.utilities.Class> ();
        
        for(int counter = 0; counter < censusSelectedListModel.getSize(); counter++){
            selectedCensusClasses.add((cerl.gui.utilities.Class)censusSelectedListModel.get(counter));
        }
        
        Result result = DigPopGUIUtilityClass.getSelectedCensusColumnValues(this.digPopGUIInformation.getCensusEnumerationsFilePath(),selectedCensusClasses);
        
        if(result.isSuccess()){
            selectedCensusClasses = (ArrayList<cerl.gui.utilities.Class>)result.getValue();
            String newName = txtNewMarkovChainName.getText();
                       
            cerl.gui.utilities.Class savedSelectSurveyClass = new cerl.gui.utilities.Class();
            
            savedSelectSurveyClass.setClassName(this.selectSurveyClass.getClassName());
            savedSelectSurveyClass.setColumnNumber(this.selectSurveyClass.getColumnNumber());
            savedSelectSurveyClass.setUserDefinedDescription(this.selectSurveyClass.getUserDefinedDescription());
            
            ArrayList<SurveyColumnValuesGrouping> copy = new ArrayList<>(this.selectSurveyClass.getSurveyColumnValuesGroupings());
            
            Object cloneCopy = copy.clone();
            
            ArrayList<SurveyColumnValuesGrouping> clonedEditedSurveyColumnValuesGroupings = new ArrayList<SurveyColumnValuesGrouping>();
            
            for(SurveyColumnValuesGrouping clone : (ArrayList<SurveyColumnValuesGrouping>)cloneCopy){
                clonedEditedSurveyColumnValuesGroupings.add(clone);
            }
            
            savedSelectSurveyClass.setSurveyColumnValuesGroupings(clonedEditedSurveyColumnValuesGroupings);
            
            int newId = this.censusSurveyClasses.getMarkovChains().size() + 1;
            
            MarkovChain markovChain = new MarkovChain(newName, selectedCensusClasses, savedSelectSurveyClass, newId);
            this.censusSurveyClasses.addMarkovChains(markovChain);
            this.digPopGUIInformation.setCensusSurveyClasses(this.censusSurveyClasses);
            this.currentMarkovChainIdToShow = markovChain.getId();
            
            saveToFile();
        }
        
        return result;
    }

    /**
     * Saves the current information to the DigPop run object
     */
    private void saveToFile(){
        //Save to file
        Result    result = DigPopGUIUtilityClass.saveDigPopGUIInformationSaveFile(
                    this.digPopGUIInformation,
                    this.digPopGUIInformation.getFilePath());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCensusClass;
    private javax.swing.JButton btnClearSurveyData;
    private javax.swing.JButton btnCreateNewMarkovChain;
    private javax.swing.JButton btnEditSelectedCensusDataDescriptions;
    private javax.swing.JButton btnNextStep;
    private javax.swing.JButton btnPreviousStep;
    private javax.swing.JButton btnRemoveCensusClass;
    private javax.swing.JButton btnSurveyDataGroups;
    private javax.swing.JPanel censusJPanel;
    private javax.swing.JDialog jDialogLoadingFile;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuHelp;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPaneCensusAll;
    private javax.swing.JScrollPane jScrollPaneCensusSelected;
    private javax.swing.JScrollPane jScrollPaneSurveyAll;
    private javax.swing.JScrollPane jScrollPaneSurveyDataGroups;
    private javax.swing.JTable jTableListOfAllMarkovChains;
    private javax.swing.JPanel surveyJPanel;
    private javax.swing.JTextField txtNewMarkovChainName;
    // End of variables declaration//GEN-END:variables
}
